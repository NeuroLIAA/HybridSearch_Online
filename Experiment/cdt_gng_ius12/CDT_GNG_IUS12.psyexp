<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.1.2">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '00000', 'age': ''}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="True" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1440, 900]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[1,1,1]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="CDT_GNG_IUS12" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="CDT_Instr">
      <TextComponent name="instr_text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="instr_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Training completed!&amp;#10;&amp;#10;Welcome to the first experiment. &amp;#10;In this experiment you will be remembering colors.&amp;#10;&amp;#10;Each trial will start with a fixation cross.&amp;#10;Do your best to keep your eyes on it.&amp;#10;&amp;#10;Then, 4 or 6 squares with different colors will appear.&amp;#10;Remember as many colors as you can.&amp;#10;After a short delay, one square will reappear.&amp;#10;If it has the SAME color and location, press the &quot;K&quot; key.&amp;#10;If the color or location is DIFFERENT, press the &quot;L&quot; key.&amp;#10;If you are not sure, just take your best guess.&amp;#10;&amp;#10;It should take less than 10 minutes.&amp;#10;&amp;#10;Press 'S' to start the EXPERIMENT." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="space_to_start">
        <Param name="allowedKeys" updates="constant" val="'s'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="space_to_start" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="CDT_Instr_train">
      <TextComponent name="instr_text_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="instr_text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Welcome to the experiment. &amp;#10;In this experiment you will be remembering colors.&amp;#10;&amp;#10;Each trial will start with a black fixation cross.&amp;#10;PLEASE try to keep your eyes on it (it will help you).&amp;#10;Then, 4 or 6 squares with different colors will appear.&amp;#10;Remember as many colors as you can.&amp;#10;After a short delay, one square will reappear.&amp;#10;&amp;#10;If it has the SAME color and location, press the &quot;K&quot; key.&amp;#10;If the color or location is DIFFERENT, press the &quot;L&quot; key.&amp;#10;If you are not sure, just take your best guess.&amp;#10;&amp;#10;Press 'S' to start TRAINING." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="space_to_start_2">
        <Param name="allowedKeys" updates="constant" val="'s'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="space_to_start_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="CDT_Trial">
      <PolygonComponent name="stim1">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim1col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim1col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim1" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim1opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim1posx,stim1posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="stim2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim2col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim2col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim2" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim2opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim2posx,stim2posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="stim3">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim3col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim3col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim3" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim3opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim3posx,stim3posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="stim4">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim4col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim4col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim4" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim4opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim4posx,stim4posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="stim5">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim5col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim5col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim5" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim5opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim5posx,stim5posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="stim6">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim6col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim6col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim6" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim6opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim6posx,stim6posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="target">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$targetcol" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$targetcol" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="target" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[targetposx,targetposy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="2.05" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <TextComponent name="trialcount">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="trialcount" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.45, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.05" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$trialnum" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="fix">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="code"/>
        <Param name="name" updates="None" val="fix" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param name="allowedKeys" updates="set every repeat" val="'k','l'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="2.05" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="CDT_Trial_train">
      <PolygonComponent name="stim1_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim1col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim1col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim1_2" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim1opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim1posx,stim1posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="stim2_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim2col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim2col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim2_2" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim2opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim2posx,stim2posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="stim3_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim3col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim3col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim3_2" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim3opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim3posx,stim3posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="stim4_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim4col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim4col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim4_2" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim4opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim4posx,stim4posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="stim5_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim5col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim5col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim5_2" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim5opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim5posx,stim5posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="stim6_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$stim6col" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$stim6col" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim6_2" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="stim6opa" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[stim6posx,stim6posy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="1" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$stimdur" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="target_2">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="set every repeat" val="$targetcol" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="set every repeat" val="$targetcol" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="target_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every repeat" val="[targetposx,targetposy]" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="set every repeat" val="[stimsizex,stimsizey]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="2.05" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </PolygonComponent>
      <TextComponent name="trialcount_2">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="trialcount_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0.45, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="2.05" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$trialnum" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="fix_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="code"/>
        <Param name="name" updates="None" val="fix_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_2">
        <Param name="allowedKeys" updates="set every repeat" val="'k','l'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="2.05" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="GNG_Instr">
      <TextComponent name="Instructions">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instructions" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Remember, press 'Space' for blue, nothing for orange. &amp;#10;&amp;#10;Now, it is going to be faster and without feedback...&amp;#10;&amp;#10;Good Luck!!&amp;#10;&amp;#10;&amp;#10;'S' to start.&amp;#10;&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="InstrResp">
        <Param name="allowedKeys" updates="constant" val="'s'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="InstrResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="GNG_fix">
      <TextComponent name="fix_ini">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="fix_ini" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="GNG_trial">
      <TextComponent name="fix_trial">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="fix_trial" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.60" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="trialBlue">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[-1.000,-1.000,1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1.000,-1.000,1.000]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="180" valType="int"/>
        <Param name="name" updates="None" val="trialBlue" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="blueOpacity" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.15, 0.15)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.15" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="trialOrange">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1.000,0.004,-1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1.000,0.004,-1.000]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="180" valType="int"/>
        <Param name="name" updates="None" val="trialOrange" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="orangeOpacity" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.15, 0.15)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.15" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <KeyboardComponent name="trialResp">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trialResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.60" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="GNG_Instr_2">
      <TextComponent name="Instructions_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instructions_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Rest and press 'S' to start. Remember , 'space' for blue, nothing for orange" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="InstrResp_2">
        <Param name="allowedKeys" updates="constant" val="'s'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="InstrResp_2" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="GNG_end">
      <TextComponent name="thanks">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="thanks" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="This is the end of the experiment. &amp;#10;&amp;#10;Thank you for your time!!! &amp;#10;&amp;#10;Press ‘q’ to exit." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="endResp">
        <Param name="allowedKeys" updates="constant" val="'q'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="endResp" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="consent1">
      <ImageComponent name="consent_1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Slide1.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="consent_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="[1, 0.8533]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_3">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.49)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="After reading, press Space to continue&amp;#10;&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="height" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="consent1_2">
      <ImageComponent name="consent">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Slide2.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="consent" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="[1, 0.8533]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_4">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_4">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_4" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.49)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="After reading, press Space to continue&amp;#10;&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="height" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="consent1_3">
      <ImageComponent name="consent_2">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="Slide3.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="consent_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="[1, 0.8533]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_6">
        <Param name="allowedKeys" updates="constant" val="'y'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_6" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_5">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_5" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.49)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="I consent (Y) I do not consent (Esc)&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="height" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="trial_slider">
      <CodeComponent name="code_perfoskip_2">
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="PerfoE = 0;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="PerfoE = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="PerfoE = trials.data['slider_2.response'].mean()&amp;#10;&amp;#10;if PerfoE &lt; 5:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="// Get JS array of trial objects (i.e., a list of python dicts with response data)&amp;#10;dat = psychoJS.experiment._trialsData&amp;#10;&amp;#10;// Filter data to get correct trials&amp;#10;corr = dat.filter((trial) =&gt; trial['engprof_trials.ran'] === 1)&amp;#10;&amp;#10;// Get responses only as an array&amp;#10;rts = corr.map((trial) =&gt; trial['slider_2.response'])&amp;#10;&amp;#10;// Reduce performance to a single number : the mean&amp;#10;PerfoE = rts.reduce((a, b) =&gt; a + b) / rts.length&amp;#10;&amp;#10;if (PerfoE &lt; 5) {&amp;#10;    continueRoutine = false;&amp;#10;    }" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_perfoskip_2" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$qenglish" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <SliderComponent name="slider_inactive">
        <Param name="color" updates="constant" val="LightGray" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="HelveticaBold" valType="str"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="granularity" updates="constant" val="0" valType="code"/>
        <Param name="labels" updates="constant" val="" valType="list"/>
        <Param name="name" updates="None" val="slider_inactive" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="size" updates="constant" val="(1.0, 0.1)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="storeHistory" updates="constant" val="False" valType="bool"/>
        <Param name="storeRating" updates="constant" val="True" valType="bool"/>
        <Param name="storeRatingTime" updates="constant" val="True" valType="bool"/>
        <Param name="styles" updates="constant" val="['rating']" valType="fixedList"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="ticks" updates="constant" val="(1, 2, 3, 4, 5)" valType="list"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </SliderComponent>
      <SliderComponent name="slider">
        <Param name="color" updates="constant" val="LightGray" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="granularity" updates="constant" val="0" valType="code"/>
        <Param name="labels" updates="constant" val="('Not at all \n characteristic of me', 'A little characteristic of me', 'Somewhat characteristic of me', 'Very characteristic of me', 'Entirely characteristic of me')" valType="list"/>
        <Param name="name" updates="None" val="slider" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.15)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.0, 0.05)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="storeHistory" updates="constant" val="False" valType="bool"/>
        <Param name="storeRating" updates="constant" val="True" valType="bool"/>
        <Param name="storeRatingTime" updates="constant" val="True" valType="bool"/>
        <Param name="styles" updates="constant" val="['rating', 'radio', 'labels45', 'whiteOnBlack']" valType="fixedList"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="ticks" updates="constant" val="(1, 2, 3, 4, 5)" valType="list"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </SliderComponent>
      <CodeComponent name="code_slider">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="sliderClick = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="sliderClick=0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if showSlider==None:&amp;#10;    continueRoutine=False&amp;#10;elif slider.getRating() != None and sliderClick==0:&amp;#10;    sliderClick=t&amp;#10;elif sliderClick == 0:&amp;#10;    pass&amp;#10;elif t &gt; sliderClick+1:&amp;#10;    continueRoutine=False&amp;#10;    " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((showSlider === undefined)) {&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    if (((slider.getRating() !== undefined) &amp;&amp; (sliderClick === 0))) {&amp;#10;        sliderClick = t;&amp;#10;    } else {&amp;#10;        if ((sliderClick === 0)) {&amp;#10;        } else {&amp;#10;            if ((t &gt; (sliderClick + 1))) {&amp;#10;                continueRoutine = false;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_slider" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_slider_JS">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="slider.size[1] = slider.size[1] / 2;&amp;#10;slider._applyStyle();&amp;#10;markerSize = util.to_px(slider.size, 'height', psychoJS.window)[1];&amp;#10;slider.labels=['Not at all\n characteristic\n of me','A little\n characteristic\n of me','Somewhat\ncharacteristic\n of me','Very\n characteristic\n of me','Entirely\n characteristic\nof me'];&amp;#10;slider.labelHeight=.01;&amp;#10;col = new util.Color('white')" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="try {&amp;#10;    if (slider._markerColor.int !== col.int) {&amp;#10;        slider._markerColor = col;&amp;#10;        slider._marker.lineStyle(1, col.int, 1, 0.5);&amp;#10;        slider._marker.beginFill(col.int, 1);&amp;#10;        slider._marker.moveTo(0, 0);&amp;#10;        slider._marker.lineTo(markerSize, -markerSize);&amp;#10;        slider._marker.lineTo(-markerSize, -markerSize);&amp;#10;        slider._marker.endFill();&amp;#10;        slider._needUpdate = true;&amp;#10;        slider._updateIfNeeded();&amp;#10;&amp;#10;     }&amp;#10;} catch (err) {}" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_slider_JS" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="IUS12_Instr">
      <CodeComponent name="code_perfoskip">
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="PerfoE = 0;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="PerfoE = 0" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="PerfoE = trials.data['slider_2.response'].mean()&amp;#10;&amp;#10;if PerfoE &lt; 5:&amp;#10;    continueRoutine = False" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="// Get JS array of trial objects (i.e., a list of python dicts with response data)&amp;#10;dat = psychoJS.experiment._trialsData&amp;#10;&amp;#10;// Filter data to get correct trials&amp;#10;corr = dat.filter((trial) =&gt; trial['engprof_trials.ran'] === 1)&amp;#10;&amp;#10;// Get responses only as an array&amp;#10;rts = corr.map((trial) =&gt; trial['slider_2.response'])&amp;#10;&amp;#10;// Reduce RTs to a single number : the mean&amp;#10;PerfoE = rts.reduce((a, b) =&gt; a + b) / rts.length&amp;#10;&amp;#10;&amp;#10;// Get all correct&amp;#10;//nCorr = 0;&amp;#10;//var eachResp;&amp;#10;//for (eachResp=0; eachResp&lt;psychoJS.experiment._trialsData.length; eachResp++) &amp;#10;//{&amp;#10;//  nCorr += psychoJS.experiment._trialsData[eachResp]['slider_2.response'];&amp;#10;//}&amp;#10;//PerfoE = 100 * nCorr / psychoJS.experiment._trialsData.length;&amp;#10;&amp;#10;msgE = &quot;English Prof:&quot; + PerfoE + &quot;.&quot;;&amp;#10;&amp;#10;&amp;#10;if (PerfoE &lt; 5) {&amp;#10;    continueRoutine = false;&amp;#10;    }" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_perfoskip" valType="code"/>
      </CodeComponent>
      <TextComponent name="text">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="The following questions are about how you view uncertainties. &amp;#10;There are no right or wrong answers, just click on the statement that describes you.&amp;#10;&amp;#10;Please read each statement and rate on a scale of 1 ('not at all characteristic of me') to 5 ('entirely characteristic of me') in relation to how much each describes your way of being.&amp;#10;&amp;#10;&amp;#10;Press 's' to start" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="InstrResp_3">
        <Param name="allowedKeys" updates="constant" val="'s'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="InstrResp_3" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="gender_q">
      <TextComponent name="gender_question">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="gender_question" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="In order to allow us to describe our sample, we would now like you to answer.&amp;#10;&amp;#10;What is your gender?&amp;#10;&amp;#10;Woman (W)&amp;#10;Man(M)&amp;#10;Non-binary (N)&amp;#10;Different identity (D)&amp;#10;Prefer not to say (P)" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="Gender">
        <Param name="allowedKeys" updates="constant" val="'w','m','n','d','p'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="Gender" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="age_q">
      <TextComponent name="age_question">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="age_question" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, .1)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="How old are you (in years)?&amp;#10;Type two digits then enter or 0 for prefer not to say." valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="code"/>
      </TextComponent>
      <CodeComponent name="age_code">
        <Param name="Begin Experiment" updates="constant" val="displayText=''&amp;#10;oldDisplayText=''&amp;#10;showAge=1" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="displayText = &quot;&quot;;&amp;#10;oldDisplayText = &quot;&quot;;&amp;#10;showAge = 1;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="cursorCounter = 0;&amp;#10;cursorVariable = &quot;|&quot;;&amp;#10;captured_string = &quot;&quot;;&amp;#10;subject_response_finished = false;&amp;#10;event.clearEvents();&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="cursorCounter=0&amp;#10;cursorVariable='|'&amp;#10;captured_string=''&amp;#10;subject_response_finished=False&amp;#10;event.clearEvents()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if cursorCounter &gt;= 30:&amp;#10;    if cursorVariable=='|':&amp;#10;        cursorVariable=' '&amp;#10;    else:&amp;#10;        cursorVariable='|'&amp;#10;    cursorCounter=0&amp;#10;cursorCounter+=1&amp;#10;&amp;#10;if subject_response_finished or showAge==undefined:&amp;#10;    final_response=captured_string&amp;#10;    continueRoutine=False&amp;#10;    &amp;#10;keys = event.getKeys()&amp;#10;if len(keys):&amp;#10;    if 'escape' in keys:&amp;#10;        core.quit()&amp;#10;    elif 'backspace' in keys:&amp;#10;        captured_string = captured_string[:-1]&amp;#10;    elif 'delete' in keys:&amp;#10;        captured_string = captured_string[:-1]&amp;#10;    elif 'return' in keys and (captured_string=='0' or len(captured_string) ==2):&amp;#10;        subject_response_finished=True&amp;#10;    elif len(captured_string) == 2:&amp;#10;        pass&amp;#10;    elif '0' in keys:&amp;#10;        captured_string = captured_string+'0'&amp;#10;    elif '1' in keys:&amp;#10;        captured_string = captured_string+'1'&amp;#10;    elif '2' in keys:&amp;#10;        captured_string = captured_string+'2'&amp;#10;    elif '3' in keys:&amp;#10;        captured_string = captured_string+'3'&amp;#10;    elif '4' in keys:&amp;#10;        captured_string = captured_string+'4'&amp;#10;    elif '5' in keys:&amp;#10;        captured_string = captured_string+'5'&amp;#10;    elif '6' in keys:&amp;#10;        captured_string = captured_string+'6'&amp;#10;    elif '7' in keys:&amp;#10;        captured_string = captured_string+'7'&amp;#10;    elif '8' in keys:&amp;#10;        captured_string = captured_string+'8'&amp;#10;    elif '9' in keys:&amp;#10;        captured_string = captured_string+'9'&amp;#10;    else:&amp;#10;        pass&amp;#10;&amp;#10;displayText = captured_string+cursorVariable&amp;#10;if displayText != oldDisplayText:&amp;#10;    age_text.setText(displayText)&amp;#10;    oldDisplayText=displayText" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((cursorCounter &gt;= 30)) {&amp;#10;    if ((cursorVariable === &quot;|&quot;)) {&amp;#10;        cursorVariable = &quot; &quot;;&amp;#10;    } else {&amp;#10;        cursorVariable = &quot;|&quot;;&amp;#10;    }&amp;#10;    cursorCounter = 0;&amp;#10;}&amp;#10;cursorCounter += 1;&amp;#10;if ((subject_response_finished || (showAge === undefined))) {&amp;#10;    final_response = captured_string;&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;keys = event.getKeys();&amp;#10;if (keys.length) {&amp;#10;    if (_pj.in_es6(&quot;escape&quot;, keys)) {&amp;#10;        core.quit();&amp;#10;    } else {&amp;#10;        if (_pj.in_es6(&quot;backspace&quot;, keys)) {&amp;#10;            captured_string = captured_string.slice(0, (- 1));&amp;#10;        } else {&amp;#10;            if (_pj.in_es6(&quot;delete&quot;, keys)) {&amp;#10;                captured_string = captured_string.slice(0, (- 1));&amp;#10;            } else {&amp;#10;                if ((_pj.in_es6(&quot;return&quot;, keys) &amp;&amp; ((captured_string === &quot;0&quot;) || (captured_string.length === 2)))) {&amp;#10;                    subject_response_finished = true;&amp;#10;                } else {&amp;#10;                    if ((captured_string.length === 2)) {&amp;#10;                    } else {&amp;#10;                        if (_pj.in_es6(&quot;0&quot;, keys)) {&amp;#10;                            captured_string = (captured_string + &quot;0&quot;);&amp;#10;                        } else {&amp;#10;                            if (_pj.in_es6(&quot;1&quot;, keys)) {&amp;#10;                                captured_string = (captured_string + &quot;1&quot;);&amp;#10;                            } else {&amp;#10;                                if (_pj.in_es6(&quot;2&quot;, keys)) {&amp;#10;                                    captured_string = (captured_string + &quot;2&quot;);&amp;#10;                                } else {&amp;#10;                                    if (_pj.in_es6(&quot;3&quot;, keys)) {&amp;#10;                                        captured_string = (captured_string + &quot;3&quot;);&amp;#10;                                    } else {&amp;#10;                                        if (_pj.in_es6(&quot;4&quot;, keys)) {&amp;#10;                                            captured_string = (captured_string + &quot;4&quot;);&amp;#10;                                        } else {&amp;#10;                                            if (_pj.in_es6(&quot;5&quot;, keys)) {&amp;#10;                                                captured_string = (captured_string + &quot;5&quot;);&amp;#10;                                            } else {&amp;#10;                                                if (_pj.in_es6(&quot;6&quot;, keys)) {&amp;#10;                                                    captured_string = (captured_string + &quot;6&quot;);&amp;#10;                                                } else {&amp;#10;                                                    if (_pj.in_es6(&quot;7&quot;, keys)) {&amp;#10;                                                        captured_string = (captured_string + &quot;7&quot;);&amp;#10;                                                    } else {&amp;#10;                                                        if (_pj.in_es6(&quot;8&quot;, keys)) {&amp;#10;                                                            captured_string = (captured_string + &quot;8&quot;);&amp;#10;                                                        } else {&amp;#10;                                                            if (_pj.in_es6(&quot;9&quot;, keys)) {&amp;#10;                                                                captured_string = (captured_string + &quot;9&quot;);&amp;#10;                                                            } else {&amp;#10;                                                            }&amp;#10;                                                        }&amp;#10;                                                    }&amp;#10;                                                }&amp;#10;                                            }&amp;#10;                                        }&amp;#10;                                    }&amp;#10;                                }&amp;#10;                            }&amp;#10;                        }&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;displayText = (captured_string + cursorVariable);&amp;#10;if ((displayText !== oldDisplayText)) {&amp;#10;    age_text.setText(displayText);&amp;#10;    oldDisplayText = displayText;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="age = final_response.replace(&quot;\n&quot;, &quot;,&quot;);&amp;#10;thisExp.addData(&quot;Age&quot;, age);&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="age = final_response.replace(&quot;\n&quot;,&quot;,&quot;)&amp;#10;thisExp.addData('Age',age)&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="age_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="age_text">
        <Param name="color" updates="constant" val="white" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.2" valType="code"/>
        <Param name="name" updates="None" val="age_text" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="setup">
      <CodeComponent name="code_JS">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="thisExp=psychoJS.experiment;&amp;#10;win=psychoJS.window;&amp;#10;event=psychoJS.eventManager;&amp;#10;Array.prototype.append = [].push;&amp;#10;shuffle = util.shuffle;&amp;#10;round = function(num, n=0) {    &amp;#10;    return +(Math.round(num + (&quot;e+&quot; + n))  + (&quot;e-&quot; + n));&amp;#10;}&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_JS" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_random">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="!function(a,b,c,d,e,f,g,h,i){function j(a){var b,c=a.length,e=this,f=0,g=e.i=e.j=0,h=e.S=[];for(c||(a=[c++]);d&gt;f;)h[f]=f++;for(f=0;d&gt;f;f++)h[f]=h[g=s&amp;g+a[f%c]+(b=h[f])],h[g]=b;(e.g=function(a){for(var b,c=0,f=e.i,g=e.j,h=e.S;a--;)b=h[f=s&amp;f+1],c=c*d+h[s&amp;(h[f]=h[g=s&amp;g+b])+(h[g]=b)];return e.i=f,e.j=g,c})(d)}function k(a,b){var c,d=[],e=typeof a;if(b&amp;&amp;&quot;object&quot;==e)for(c in a)try{d.push(k(a[c],b-1))}catch(f){}return d.length?d:&quot;string&quot;==e?a:a+&quot;\0&quot;}function l(a,b){for(var c,d=a+&quot;&quot;,e=0;e&lt;d.length;)b[s&amp;e]=s&amp;(c^=19*b[s&amp;e])+d.charCodeAt(e++);return n(b)}function m(c){try{return o?n(o.randomBytes(d)):(a.crypto.getRandomValues(c=new Uint8Array(d)),n(c))}catch(e){return[+new Date,a,(c=a.navigator)&amp;&amp;c.plugins,a.screen,n(b)]}}function n(a){return String.fromCharCode.apply(0,a)}var o,p=c.pow(d,e),q=c.pow(2,f),r=2*q,s=d-1,t=c[&quot;seed&quot;+i]=function(a,f,g){var h=[];f=1==f?{entropy:!0}:f||{};var o=l(k(f.entropy?[a,n(b)]:null==a?m():a,3),h),s=new j(h);return l(n(s.S),b),(f.pass||g||function(a,b,d){return d?(c[i]=a,b):a})(function(){for(var a=s.g(e),b=p,c=0;q&gt;a;)a=(a+c)*d,b*=d,c=s.g(1);for(;a&gt;=r;)a/=2,b/=2,c&gt;&gt;&gt;=1;return(a+c)/b},o,&quot;global&quot;in f?f.global:this==c)};if(l(c[i](),b),g&amp;&amp;g.exports){g.exports=t;try{o=require(&quot;crypto&quot;)}catch(u){}}else h&amp;&amp;h.amd&amp;&amp;h(function(){return t})}(this,[],Math,256,6,52,&quot;object&quot;==typeof module&amp;&amp;module,&quot;function&quot;==typeof define&amp;&amp;define,&quot;random&quot;);" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_random" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_4">
        <Param name="Begin Experiment" updates="constant" val="items = []" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="items = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="kb.clock.reset();&amp;#10;msg0 = ((&quot;Welcome back to the study!\n Your participant ID is: &quot; + expInfo[&quot;participant&quot;].toString()) + &quot;\n\n If you don't know your participant ID, please abort the experiment (press 'Esc' and contact the experimenters (details below). \n Ready to start? Press the Y key when ready&quot;);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="kb.clock.reset()  # when you want to start the timer from&amp;#10;msg0=&quot;Welcome back to the study!\n Your participant ID is: &quot;+str(expInfo['participant']) + &quot;\n\n If you don't know your participant ID, please abort the experiment (press 'Esc' and contact the experimenters (details below). \n Ready to start? Press the Y key when ready&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;    &amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="/* Syntax Error: Fix Python code */" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_4" valType="code"/>
      </CodeComponent>
      <ImageComponent name="contact_info">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="contact_info.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="contact_info" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.2)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="[0.9, 0.1]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_ini">
        <Param name="allowedKeys" updates="constant" val="'y'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_ini" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="consent_question">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="consent_question" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$msg0" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="random_seed">
      <CodeComponent name="code_both">
        <Param name="Begin Experiment" updates="constant" val="import random&amp;#10;seedString = core.Clock()&amp;#10;random.seed(seedString)&amp;#10;randomnum1=random.random()&amp;#10;random.seed(seedString)&amp;#10;randomnum2=random.random()&amp;#10;&amp;#10;kb = keyboard.Keyboard()&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="seedString = Math.seedrandom();&amp;#10;randomnum1 = Math.random(); &amp;#10;Math.seedrandom(seedString);&amp;#10;randomnum2 = Math.random(); &amp;#10;kb = new core.Keyboard({psychoJS: psychoJS, clock: new util.Clock(), waitForStart: true}); &amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_both" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="msg = (((&quot;Testing reseeding random numbers.\n\nrandomnum1: &quot; + randomnum1.toString()) + &quot;\n\nrandomnum2: &quot;) + randomnum2.toString());&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="msg=&quot;Testing reseeding random numbers.\n\nrandomnum1: &quot;+str(randomnum1) + &quot;\n\nrandomnum2: &quot;+str(randomnum2)&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys(['space','quit'], waitRelease=True)&amp;#10;if 'quit' in keys:&amp;#10;    core.quit()&amp;#10;elif 'space' in keys or showSeed != 1:&amp;#10;    continueRoutine=False&amp;#10;    &amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys([&quot;space&quot;, &quot;quit&quot;], {&quot;waitRelease&quot;: true});&amp;#10;if (_pj.in_es6(&quot;quit&quot;, keys)) {&amp;#10;    core.quit();&amp;#10;} else {&amp;#10;    if ((_pj.in_es6(&quot;space&quot;, keys) || (showSeed !== 1))) {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <TextComponent name="instructions">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="instructions" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="" valType="str"/>
        <Param name="units" updates="None" val="norm" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="1.5" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="embedded_form">
      <TextComponent name="iframe_loading_2">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="iframe_loading_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Loading..." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <CodeComponent name="iframe_code_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="showSlider=1&amp;#10;showLoop=1&amp;#10;var showAge=1&amp;#10;showVideo=0&amp;#10;showSeed=1" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="continue_routine = true; // Routines can't be ended from within Begin Routine&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="continueRoutine = continue_routine;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="// showSlider = psychoJS.experiment._currentTrialData['showSlider'];&amp;#10;// showLoop = psychoJS.experiment._currentTrialData['showLoop'];&amp;#10;// if (showLoop === undefined){&amp;#10;//     showLoop = 0;&amp;#10;//    }&amp;#10;// showAge = psychoJS.experiment._currentTrialData['showAge'];&amp;#10;showGender = psychoJS.experiment._currentTrialData['showGender'];&amp;#10;// showVideo = psychoJS.experiment._currentTrialData['showVideo'];&amp;#10;// showSeed = psychoJS.experiment._currentTrialData['showSeed'];&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="iframe_code_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="englishq_slider">
      <TextComponent name="text_6">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_6" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$qproficiency" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <SliderComponent name="slider_2">
        <Param name="color" updates="constant" val="LightGray" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="False" valType="bool"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="granularity" updates="constant" val="0" valType="code"/>
        <Param name="labels" updates="constant" val="" valType="list"/>
        <Param name="name" updates="None" val="slider_2" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.15)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="(1.0, 0.05)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="condition" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="storeHistory" updates="constant" val="False" valType="bool"/>
        <Param name="storeRating" updates="constant" val="True" valType="bool"/>
        <Param name="storeRatingTime" updates="constant" val="True" valType="bool"/>
        <Param name="styles" updates="constant" val="['rating', 'radio', 'labels45', 'whiteOnBlack']" valType="fixedList"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="ticks" updates="constant" val="(0,1, 2, 3, 4, 5,6,7,8,9,10)" valType="list"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </SliderComponent>
      <CodeComponent name="code_auto">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if ((engprof_trials.thisTrial &lt;= 2)) {&amp;#10;    continueRoutine = true;&amp;#10;} else {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if engprof_trials.thisTrial&lt;=2 :&amp;#10;    continueRoutine=True&amp;#10;else:&amp;#10;    continueRoutine=False" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_auto" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_slider_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="sliderClick = 0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="sliderClick=0&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if showSlider==None:&amp;#10;    continueRoutine=False&amp;#10;elif slider_2.getRating() != None and sliderClick==0:&amp;#10;    sliderClick=t&amp;#10;elif sliderClick == 0:&amp;#10;    pass&amp;#10;elif t &gt; sliderClick+1:&amp;#10;    continueRoutine=False&amp;#10;    " valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((showSlider === undefined)) {&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    if (((slider_2.getRating() !== undefined) &amp;&amp; (sliderClick === 0))) {&amp;#10;        sliderClick = t;&amp;#10;    } else {&amp;#10;        if ((sliderClick === 0)) {&amp;#10;        } else {&amp;#10;            if ((t &gt; (sliderClick + 1))) {&amp;#10;                continueRoutine = false;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_slider_2" valType="code"/>
      </CodeComponent>
      <CodeComponent name="code_slider_JS_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="slider_2.size[1] = slider_2.size[1] / 2;&amp;#10;slider_2._applyStyle();&amp;#10;markerSize = util.to_px(slider.size, 'height', psychoJS.window)[1];&amp;#10;slider_2.labels=['0','1','2','3','4','5','6','7','8','9','10'];&amp;#10;slider_2.labelHeight=.01;&amp;#10;col = new util.Color('white')" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="try {&amp;#10;    if (slider_2._markerColor.int !== col.int) {&amp;#10;        slider_2._markerColor = col;&amp;#10;        slider_2._marker.lineStyle(1, col.int, 1, 0.5);&amp;#10;        slider_2._marker.beginFill(col.int, 1);&amp;#10;        slider_2._marker.moveTo(0, 0);&amp;#10;        slider_2._marker.lineTo(markerSize, -markerSize);&amp;#10;        slider_2._marker.lineTo(-markerSize, -markerSize);&amp;#10;        slider_2._marker.endFill();&amp;#10;        slider_2._needUpdate = true;&amp;#10;        slider_2._updateIfNeeded();&amp;#10;&amp;#10;     }&amp;#10;} catch (err) {}" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_slider_JS_2" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="thanks_2">
      <CodeComponent name="code_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="msg2 = &quot;Thanks for participating. \n \&amp;#10;To enter the draw to win an Amazon eVoucher of £20, please send an email to lpzmi@nottingham.ac.uk with subject 'draw2' and in the email cut and paste the following phrase \n\&amp;#10;'I participated in the study on EFCD36'\n\n \&amp;#10;Press x to finish the experiment&quot;;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="msg2='doh!'#if this comes up we forgot to update the msg!&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="msg2 = 'Thanks for participating.  \&amp;#10; \n \&amp;#10;Press x to finish the experiment'&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="msg2 = &quot;Thanks for participating. \n \&amp;#10;To enter the draw to win an Amazon eVoucher of £20, please send an email to lpzmi@nottingham.ac.uk with subject 'draw2' and in the email cut and paste the following phrase \n\&amp;#10;'I participated in the study on EFCD36'\n\n \&amp;#10;Press x to finish the experiment&quot;;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_7">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_7" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$msg2" valType="str"/>
        <Param name="units" updates="None" val="height" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_end">
        <Param name="allowedKeys" updates="constant" val="'x'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_end" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="GNG_Trial_Train">
      <TextComponent name="fix_trial_Train">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="fix_trial_Train" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <PolygonComponent name="trialBlue_Train">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[-1.000,-1.000,1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[-1.000,-1.000,1.000]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="180" valType="int"/>
        <Param name="name" updates="None" val="trialBlue_Train" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="blueOpacity" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.15, 0.15)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <PolygonComponent name="trialOrange_Train">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1.000,0.004,-1.000]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1.000,0.004,-1.000]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="180" valType="int"/>
        <Param name="name" updates="None" val="trialOrange_Train" valType="code"/>
        <Param name="opacity" updates="set every repeat" val="orangeOpacity" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="regular polygon..." valType="str"/>
        <Param name="size" updates="constant" val="(0.15, 0.15)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.2" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <KeyboardComponent name="trialResp_Train">
        <Param name="allowedKeys" updates="constant" val="'space'" valType="code"/>
        <Param name="correctAns" updates="constant" val="$corrAns" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trialResp_Train" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="store" updates="constant" val="first key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="True" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="GNG_Feedback">
      <CodeComponent name="code_Train">
        <Param name="Begin Experiment" updates="constant" val="feedback_color_list = ['green','red']&amp;#10;feedback_word_list = ['correct!','incorrect!']" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="feedback_color_list = [&quot;green&quot;, &quot;red&quot;];&amp;#10;feedback_word_list = [&quot;correct!&quot;, &quot;incorrect!&quot;];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (trialResp_Train.corr) {&amp;#10;    feedback_color = feedback_color_list[0];&amp;#10;    feedback_word = feedback_word_list[0];&amp;#10;} else {&amp;#10;    feedback_color = feedback_color_list[1];&amp;#10;    feedback_word = feedback_word_list[1];&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="if trialResp_Train.corr:&amp;#10;    feedback_color = feedback_color_list[0]&amp;#10;    feedback_word = feedback_word_list[0]&amp;#10;else:&amp;#10;    feedback_color = feedback_color_list[1]&amp;#10;    feedback_word = feedback_word_list[1]&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_Train" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_feedback">
        <Param name="color" updates="set every repeat" val="$feedback_color" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="code"/>
        <Param name="name" updates="None" val="text_feedback" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$feedback_word" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="fix_3">
        <Param name="color" updates="constant" val="blue" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="fix_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.5" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="0.5" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="+" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="GNG_Instr_Train">
      <TextComponent name="Instructions_3">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="Instructions_3" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Thanks for completing the first task, &amp;#10;&amp;#10;The second part will be shorter (aprox. 3 minutes).&amp;#10;&amp;#10;Press 'Space' for blue, nothing for orange. &amp;#10;&amp;#10;Let's do a short training first...&amp;#10;&amp;#10;Press 'S' to start the training&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="InstrResp_4">
        <Param name="allowedKeys" updates="constant" val="'s'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="InstrResp_4" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="key_reminder">
      <TextComponent name="text_8">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="text_8" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="1.0" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Remember!&amp;#10;&amp;#10;SAME color and location, press &quot;K&quot;.&amp;#10;&amp;#10;color or location is DIFFERENT, press &quot;L&quot;." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
    <Routine name="take_break">
      <CodeComponent name="code_break">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Both" valType="str"/>
        <Param name="Each Frame" updates="constant" val="if not trials.thisN in [59]:&amp;#10;    break_duration = 0&amp;#10;    continueRoutine = False&amp;#10;else:&amp;#10;    break_duration = 60" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((! _pj.in_es6(trials.thisN, [59]))) {&amp;#10;    break_duration = 0;&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    break_duration = 60;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_break" valType="code"/>
      </CodeComponent>
      <TextComponent name="text_9">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.04" valType="code"/>
        <Param name="name" updates="None" val="text_9" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$break_duration" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="You are halfway through this experiment!&amp;#10;Take a short break. &amp;#10;&amp;#10;Press 'S' to continue." valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_5">
        <Param name="allowedKeys" updates="set every repeat" val="'s'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_5" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="$break_duration" valType="code"/>
        <Param name="store" updates="constant" val="last key" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="debrief">
      <ImageComponent name="debrief_slide_1">
        <Param name="color" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flipHoriz" updates="constant" val="False" valType="bool"/>
        <Param name="flipVert" updates="constant" val="False" valType="bool"/>
        <Param name="image" updates="constant" val="debrief_slide.png" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="mask" updates="constant" val="None" valType="str"/>
        <Param name="name" updates="None" val="debrief_slide_1" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="size" updates="constant" val="[1, 0.8533]" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="texture resolution" updates="constant" val="128" valType="code"/>
        <Param name="units" updates="None" val="height" valType="str"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_7">
        <Param name="allowedKeys" updates="constant" val="'space','s'" valType="code"/>
        <Param name="correctAns" updates="constant" val="" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="discard previous" updates="constant" val="True" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="forceEndRoutine" updates="constant" val="True" valType="bool"/>
        <Param name="name" updates="None" val="key_resp_7" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="store" updates="constant" val="nothing" valType="str"/>
        <Param name="storeCorrect" updates="constant" val="False" valType="bool"/>
        <Param name="syncScreenRefresh" updates="constant" val="True" valType="bool"/>
      </KeyboardComponent>
      <TextComponent name="text_10">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.03" valType="code"/>
        <Param name="name" updates="None" val="text_10" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.49)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="After reading, press 's' to continue&amp;#10;&amp;#10;" valType="str"/>
        <Param name="units" updates="None" val="height" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="setup"/>
    <Routine name="embedded_form"/>
    <Routine name="random_seed"/>
    <Routine name="consent1"/>
    <Routine name="consent1_2"/>
    <Routine name="consent1_3"/>
    <Routine name="CDT_Instr_train"/>
    <LoopInitiator loopType="TrialHandler" name="CDT_trials_train">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('trialnum', 1), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', -0.05475584659192545), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.27377923295962725), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'orange'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', 0.05475584659192545), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', -0.05475584659192545), ('stim5col', 'cyan'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.16426753977577635), ('stim6col', 'blue'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.16426753977577635), ('targetcol', 'orange'), ('corrAns', 'k')]), OrderedDict([('trialnum', 2), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.05475584659192545), ('stim1posy', -0.05475584659192545), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', 0.27377923295962725), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', -0.05475584659192545), ('stim5col', 'red'), ('stim5opa', 0), ('stim6posx', -0.27377923295962725), ('stim6posy', 0.05475584659192545), ('stim6col', 'cyan'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 3), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.05475584659192545), ('stim1posy', 0.27377923295962725), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.27377923295962725), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.16426753977577635), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', -0.05475584659192545), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', 0.16426753977577635), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'blue'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', 0.27377923295962725), ('targetcol', 'green'), ('corrAns', 'k')]), OrderedDict([('trialnum', 4), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.16426753977577635), ('stim1posy', -0.05475584659192545), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.27377923295962725), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.27377923295962725), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', -0.27377923295962725), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', -0.05475584659192545), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', -0.16426753977577635), ('stim6posy', 0.16426753977577635), ('stim6col', 'black'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.27377923295962725), ('targetcol', 'cyan'), ('corrAns', 'l')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditionsTrain_luria_6_screen_pos.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="CDT_trials_train" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="key_reminder"/>
    <Routine name="CDT_Trial_train"/>
    <LoopTerminator name="CDT_trials_train"/>
    <Routine name="CDT_Instr"/>
    <LoopInitiator loopType="TrialHandler" name="CDT_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('trialnum', 1), ('condit', 'same'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', -0.27377923295962725), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.05475584659192545), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', -0.16426753977577635), ('stim5col', 'cyan'), ('stim5opa', 0), ('stim6posx', 0.16426753977577635), ('stim6posy', 0.16426753977577635), ('stim6col', 'blue'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', 0.16426753977577635), ('targetcol', 'yellow'), ('corrAns', 'k')]), OrderedDict([('trialnum', 2), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.05475584659192545), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', 0.27377923295962725), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', -0.05475584659192545), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.27377923295962725), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.16426753977577635), ('stim5col', 'green'), ('stim5opa', 0), ('stim6posx', -0.16426753977577635), ('stim6posy', 0.05475584659192545), ('stim6col', 'cyan'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', -0.27377923295962725), ('targetcol', 'blue'), ('corrAns', 'k')]), OrderedDict([('trialnum', 3), ('condit', 'same'), ('stimamt', 4), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.05475584659192545), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.05475584659192545), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.27377923295962725), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.27377923295962725), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.27377923295962725), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.27377923295962725), ('stim6posy', 0.05475584659192545), ('stim6col', 'green'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.27377923295962725), ('targetcol', 'magenta'), ('corrAns', 'k')]), OrderedDict([('trialnum', 4), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', -0.16426753977577635), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', -0.16426753977577635), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', -0.16426753977577635), ('stim5col', 'magenta'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.27377923295962725), ('stim6col', 'orange'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', -0.16426753977577635), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 5), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', -0.05475584659192545), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', 0.05475584659192545), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', -0.16426753977577635), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', -0.05475584659192545), ('stim5col', 'cyan'), ('stim5opa', 0), ('stim6posx', 0.05475584659192545), ('stim6posy', 0.27377923295962725), ('stim6col', 'red'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', -0.16426753977577635), ('targetcol', 'blue'), ('corrAns', 'k')]), OrderedDict([('trialnum', 6), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.27377923295962725), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.16426753977577635), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.05475584659192545), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.05475584659192545), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.05475584659192545), ('stim6col', 'red'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', 0.05475584659192545), ('targetcol', 'green'), ('corrAns', 'k')]), OrderedDict([('trialnum', 7), ('condit', 'same'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', -0.05475584659192545), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', 0.16426753977577635), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.05475584659192545), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.05475584659192545), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.27377923295962725), ('stim6col', 'blue'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.05475584659192545), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 8), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', -0.16426753977577635), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.05475584659192545), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.16426753977577635), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.05475584659192545), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', -0.27377923295962725), ('stim5col', 'magenta'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.05475584659192545), ('stim6col', 'orange'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', 0.16426753977577635), ('targetcol', 'green'), ('corrAns', 'k')]), OrderedDict([('trialnum', 9), ('condit', 'same'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', 0.05475584659192545), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', -0.16426753977577635), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.05475584659192545), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.05475584659192545), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', 0.16426753977577635), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.27377923295962725), ('stim6col', 'red'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.05475584659192545), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 10), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.27377923295962725), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.05475584659192545), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.05475584659192545), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'red'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.27377923295962725), ('targetcol', 'green'), ('corrAns', 'k')]), OrderedDict([('trialnum', 11), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.16426753977577635), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.27377923295962725), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.05475584659192545), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.27377923295962725), ('stim5col', 'magenta'), ('stim5opa', 0), ('stim6posx', -0.27377923295962725), ('stim6posy', 0.05475584659192545), ('stim6col', 'green'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.16426753977577635), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 12), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.05475584659192545), ('stim1posy', 0.05475584659192545), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.05475584659192545), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.27377923295962725), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', -0.16426753977577635), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.16426753977577635), ('stim5col', 'yellow'), ('stim5opa', 0), ('stim6posx', -0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'orange'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', 0.05475584659192545), ('targetcol', 'blue'), ('corrAns', 'k')]), OrderedDict([('trialnum', 13), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.27377923295962725), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.27377923295962725), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', -0.16426753977577635), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.16426753977577635), ('stim5col', 'yellow'), ('stim5opa', 0), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'cyan'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.27377923295962725), ('targetcol', 'blue'), ('corrAns', 'k')]), OrderedDict([('trialnum', 14), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.16426753977577635), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', 0.16426753977577635), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.16426753977577635), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', -0.16426753977577635), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.27377923295962725), ('stim5col', 'cyan'), ('stim5opa', 0), ('stim6posx', -0.16426753977577635), ('stim6posy', 0.27377923295962725), ('stim6col', 'orange'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.16426753977577635), ('targetcol', 'blue'), ('corrAns', 'k')]), OrderedDict([('trialnum', 15), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.05475584659192545), ('stim1posy', -0.27377923295962725), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.05475584659192545), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.16426753977577635), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.16426753977577635), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', -0.05475584659192545), ('stim5col', 'magenta'), ('stim5opa', 0), ('stim6posx', -0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'orange'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.05475584659192545), ('targetcol', 'cyan'), ('corrAns', 'k')]), OrderedDict([('trialnum', 16), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.16426753977577635), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.27377923295962725), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.27377923295962725), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.27377923295962725), ('stim6col', 'blue'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', -0.27377923295962725), ('targetcol', 'red'), ('corrAns', 'k')]), OrderedDict([('trialnum', 17), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.27377923295962725), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', -0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.16426753977577635), ('stim5col', 'blue'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.27377923295962725), ('stim6col', 'magenta'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', 0.27377923295962725), ('targetcol', 'yellow'), ('corrAns', 'k')]), OrderedDict([('trialnum', 18), ('condit', 'same'), ('stimamt', 4), ('stim1posx', -0.05475584659192545), ('stim1posy', 0.27377923295962725), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.16426753977577635), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', 0.16426753977577635), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.27377923295962725), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', 0.27377923295962725), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.27377923295962725), ('stim6col', 'green'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', -0.27377923295962725), ('targetcol', 'magenta'), ('corrAns', 'k')]), OrderedDict([('trialnum', 19), ('condit', 'same'), ('stimamt', 4), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.16426753977577635), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', 0.27377923295962725), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.05475584659192545), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', -0.05475584659192545), ('stim5col', 'black'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.27377923295962725), ('stim6col', 'blue'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'magenta'), ('corrAns', 'k')]), OrderedDict([('trialnum', 20), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.05475584659192545), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.27377923295962725), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.16426753977577635), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.05475584659192545), ('stim5col', 'red'), ('stim5opa', 0), ('stim6posx', 0.05475584659192545), ('stim6posy', -0.05475584659192545), ('stim6col', 'cyan'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', 0.16426753977577635), ('targetcol', 'blue'), ('corrAns', 'k')]), OrderedDict([('trialnum', 21), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.27377923295962725), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.27377923295962725), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', -0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.05475584659192545), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.27377923295962725), ('stim5col', 'magenta'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.05475584659192545), ('stim6col', 'green'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.27377923295962725), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 22), ('condit', 'same'), ('stimamt', 4), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.16426753977577635), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', 0.05475584659192545), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', -0.05475584659192545), ('stim5col', 'red'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.16426753977577635), ('stim6col', 'cyan'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', -0.05475584659192545), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 23), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', -0.16426753977577635), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', 0.27377923295962725), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', -0.05475584659192545), ('stim5col', 'green'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.05475584659192545), ('stim6col', 'magenta'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', 0.05475584659192545), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 24), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.05475584659192545), ('stim1posy', -0.16426753977577635), ('stim1col', 'red'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', 0.05475584659192545), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.16426753977577635), ('stim3col', 'orange'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', -0.16426753977577635), ('stim5col', 'black'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.27377923295962725), ('stim6col', 'green'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.16426753977577635), ('targetcol', 'red'), ('corrAns', 'k')]), OrderedDict([('trialnum', 25), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', -0.27377923295962725), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.27377923295962725), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', 0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.27377923295962725), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', -0.27377923295962725), ('stim5col', 'yellow'), ('stim5opa', 0), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.27377923295962725), ('stim6col', 'red'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', 0.27377923295962725), ('targetcol', 'blue'), ('corrAns', 'k')]), OrderedDict([('trialnum', 26), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', -0.16426753977577635), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.16426753977577635), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.05475584659192545), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', -0.05475584659192545), ('stim5col', 'cyan'), ('stim5opa', 0), ('stim6posx', -0.27377923295962725), ('stim6posy', 0.27377923295962725), ('stim6col', 'magenta'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', 0.16426753977577635), ('targetcol', 'yellow'), ('corrAns', 'k')]), OrderedDict([('trialnum', 27), ('condit', 'same'), ('stimamt', 4), ('stim1posx', -0.27377923295962725), ('stim1posy', 0.05475584659192545), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.16426753977577635), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.27377923295962725), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.05475584659192545), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', 0.27377923295962725), ('stim5col', 'magenta'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.27377923295962725), ('stim6col', 'yellow'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.05475584659192545), ('targetcol', 'red'), ('corrAns', 'k')]), OrderedDict([('trialnum', 28), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', -0.27377923295962725), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', 0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', -0.27377923295962725), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.05475584659192545), ('stim6col', 'magenta'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', 0.16426753977577635), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 29), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.05475584659192545), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.27377923295962725), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.05475584659192545), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', -0.05475584659192545), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.16426753977577635), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.16426753977577635), ('stim6posy', 0.05475584659192545), ('stim6col', 'blue'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', -0.05475584659192545), ('targetcol', 'green'), ('corrAns', 'k')]), OrderedDict([('trialnum', 30), ('condit', 'same'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.16426753977577635), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.05475584659192545), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.16426753977577635), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', 0.27377923295962725), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.27377923295962725), ('stim5col', 'red'), ('stim5opa', 0), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.16426753977577635), ('stim6col', 'magenta'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.05475584659192545), ('targetcol', 'green'), ('corrAns', 'k')]), OrderedDict([('trialnum', 31), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', 0.16426753977577635), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', -0.05475584659192545), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', -0.05475584659192545), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.27377923295962725), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', 0.05475584659192545), ('stim5col', 'red'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.27377923295962725), ('stim6col', 'cyan'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', -0.05475584659192545), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 32), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.27377923295962725), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', 0.16426753977577635), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.05475584659192545), ('stim5col', 'blue'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.27377923295962725), ('stim6col', 'orange'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', -0.27377923295962725), ('targetcol', 'red'), ('corrAns', 'l')]), OrderedDict([('trialnum', 33), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.27377923295962725), ('stim1posy', 0.27377923295962725), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', -0.16426753977577635), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.27377923295962725), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.27377923295962725), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', 0.27377923295962725), ('stim5col', 'green'), ('stim5opa', 0), ('stim6posx', 0.05475584659192545), ('stim6posy', -0.27377923295962725), ('stim6col', 'orange'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.27377923295962725), ('targetcol', 'cyan'), ('corrAns', 'l')]), OrderedDict([('trialnum', 34), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.16426753977577635), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.16426753977577635), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.27377923295962725), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.16426753977577635), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.05475584659192545), ('stim5col', 'black'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.27377923295962725), ('stim6col', 'orange'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', 0.16426753977577635), ('targetcol', 'cyan'), ('corrAns', 'l')]), OrderedDict([('trialnum', 35), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.05475584659192545), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', 0.27377923295962725), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.05475584659192545), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.16426753977577635), ('stim5col', 'cyan'), ('stim5opa', 0), ('stim6posx', 0.05475584659192545), ('stim6posy', 0.05475584659192545), ('stim6col', 'yellow'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', 0.27377923295962725), ('targetcol', 'cyan'), ('corrAns', 'l')]), OrderedDict([('trialnum', 36), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', -0.05475584659192545), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', 0.05475584659192545), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.05475584659192545), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.27377923295962725), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.05475584659192545), ('stim5col', 'yellow'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.27377923295962725), ('stim6col', 'green'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', -0.05475584659192545), ('targetcol', 'orange'), ('corrAns', 'l')]), OrderedDict([('trialnum', 37), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', -0.27377923295962725), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.05475584659192545), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', -0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', 0.05475584659192545), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', -0.27377923295962725), ('stim5col', 'red'), ('stim5opa', 0), ('stim6posx', -0.27377923295962725), ('stim6posy', 0.16426753977577635), ('stim6col', 'green'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', 0.05475584659192545), ('targetcol', 'green'), ('corrAns', 'l')]), OrderedDict([('trialnum', 38), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', -0.16426753977577635), ('stim1col', 'red'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.05475584659192545), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.05475584659192545), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', -0.05475584659192545), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.05475584659192545), ('stim6col', 'yellow'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.05475584659192545), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 39), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.05475584659192545), ('stim1posy', 0.05475584659192545), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.16426753977577635), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.05475584659192545), ('stim3col', 'orange'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.05475584659192545), ('stim5col', 'blue'), ('stim5opa', 0), ('stim6posx', 0.05475584659192545), ('stim6posy', -0.16426753977577635), ('stim6col', 'cyan'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.05475584659192545), ('targetcol', 'cyan'), ('corrAns', 'l')]), OrderedDict([('trialnum', 40), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.27377923295962725), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.16426753977577635), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.05475584659192545), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.27377923295962725), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.05475584659192545), ('stim5col', 'cyan'), ('stim5opa', 0), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.16426753977577635), ('stim6col', 'green'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.27377923295962725), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 41), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.05475584659192545), ('stim1posy', -0.27377923295962725), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', 0.05475584659192545), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', -0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.16426753977577635), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', -0.27377923295962725), ('stim5col', 'black'), ('stim5opa', 0), ('stim6posx', -0.27377923295962725), ('stim6posy', 0.27377923295962725), ('stim6col', 'magenta'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', -0.16426753977577635), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 42), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.16426753977577635), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.05475584659192545), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', -0.16426753977577635), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.27377923295962725), ('stim5col', 'black'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.27377923295962725), ('stim6col', 'yellow'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.16426753977577635), ('targetcol', 'blue'), ('corrAns', 'l')]), OrderedDict([('trialnum', 43), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', -0.05475584659192545), ('stim1col', 'red'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', 0.05475584659192545), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.05475584659192545), ('stim3col', 'orange'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.05475584659192545), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.27377923295962725), ('stim5col', 'magenta'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.27377923295962725), ('stim6col', 'yellow'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', -0.05475584659192545), ('targetcol', 'yellow'), ('corrAns', 'l')]), OrderedDict([('trialnum', 44), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.16426753977577635), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', -0.16426753977577635), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', -0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.05475584659192545), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.05475584659192545), ('stim5col', 'blue'), ('stim5opa', 0), ('stim6posx', 0.05475584659192545), ('stim6posy', -0.27377923295962725), ('stim6col', 'yellow'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', 0.16426753977577635), ('targetcol', 'red'), ('corrAns', 'l')]), OrderedDict([('trialnum', 45), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.05475584659192545), ('stim1posy', 0.16426753977577635), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', -0.27377923295962725), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.16426753977577635), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.27377923295962725), ('stim5col', 'green'), ('stim5opa', 0), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'cyan'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.16426753977577635), ('targetcol', 'magenta'), ('corrAns', 'l')]), OrderedDict([('trialnum', 46), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', 0.27377923295962725), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.16426753977577635), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', 0.05475584659192545), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', 0.16426753977577635), ('stim5col', 'blue'), ('stim5opa', 0), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.05475584659192545), ('stim6col', 'cyan'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', 0.05475584659192545), ('targetcol', 'cyan'), ('corrAns', 'l')]), OrderedDict([('trialnum', 47), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', -0.05475584659192545), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', 0.05475584659192545), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.27377923295962725), ('stim5col', 'green'), ('stim5opa', 0), ('stim6posx', 0.16426753977577635), ('stim6posy', 0.16426753977577635), ('stim6col', 'yellow'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.05475584659192545), ('targetcol', 'red'), ('corrAns', 'l')]), OrderedDict([('trialnum', 48), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.27377923295962725), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', -0.27377923295962725), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.05475584659192545), ('stim3col', 'orange'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.27377923295962725), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.16426753977577635), ('stim5col', 'red'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.16426753977577635), ('stim6col', 'green'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', -0.05475584659192545), ('targetcol', 'red'), ('corrAns', 'l')]), OrderedDict([('trialnum', 49), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', -0.27377923295962725), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', 0.16426753977577635), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.27377923295962725), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', -0.27377923295962725), ('stim5col', 'magenta'), ('stim5opa', 0), ('stim6posx', 0.05475584659192545), ('stim6posy', 0.27377923295962725), ('stim6col', 'blue'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.27377923295962725), ('targetcol', 'orange'), ('corrAns', 'l')]), OrderedDict([('trialnum', 50), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', 0.05475584659192545), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.16426753977577635), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', 0.27377923295962725), ('stim5col', 'yellow'), ('stim5opa', 0), ('stim6posx', -0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'orange'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'yellow'), ('corrAns', 'l')]), OrderedDict([('trialnum', 51), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', -0.27377923295962725), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', -0.27377923295962725), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.05475584659192545), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', 0.27377923295962725), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.05475584659192545), ('stim5col', 'black'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.27377923295962725), ('stim6col', 'red'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', -0.27377923295962725), ('targetcol', 'red'), ('corrAns', 'l')]), OrderedDict([('trialnum', 52), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.16426753977577635), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', 0.05475584659192545), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', -0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.05475584659192545), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.16426753977577635), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.05475584659192545), ('stim6col', 'red'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 53), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', 0.05475584659192545), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', 0.05475584659192545), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.27377923295962725), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.16426753977577635), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', 0.16426753977577635), ('stim5col', 'red'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.27377923295962725), ('stim6col', 'blue'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.27377923295962725), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 54), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.05475584659192545), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', 0.05475584659192545), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', -0.16426753977577635), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.16426753977577635), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.16426753977577635), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', 0.05475584659192545), ('stim6posy', 0.16426753977577635), ('stim6col', 'blue'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', 0.16426753977577635), ('targetcol', 'orange'), ('corrAns', 'l')]), OrderedDict([('trialnum', 55), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.05475584659192545), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.16426753977577635), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.16426753977577635), ('stim3col', 'orange'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.27377923295962725), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.27377923295962725), ('stim5col', 'red'), ('stim5opa', 0), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'cyan'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.16426753977577635), ('targetcol', 'red'), ('corrAns', 'l')]), OrderedDict([('trialnum', 56), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.05475584659192545), ('stim1col', 'red'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.16426753977577635), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.27377923295962725), ('stim5col', 'blue'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.27377923295962725), ('stim6col', 'magenta'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.05475584659192545), ('targetcol', 'green'), ('corrAns', 'l')]), OrderedDict([('trialnum', 57), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.05475584659192545), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', -0.05475584659192545), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.16426753977577635), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.05475584659192545), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.05475584659192545), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', 0.05475584659192545), ('stim6posy', -0.16426753977577635), ('stim6col', 'magenta'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', -0.05475584659192545), ('targetcol', 'orange'), ('corrAns', 'l')]), OrderedDict([('trialnum', 58), ('condit', 'different'), ('stimamt', 4), ('stim1posx', -0.16426753977577635), ('stim1posy', 0.27377923295962725), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', 0.27377923295962725), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', -0.16426753977577635), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', -0.05475584659192545), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', 0.16426753977577635), ('stim5col', 'green'), ('stim5opa', 0), ('stim6posx', 0.16426753977577635), ('stim6posy', 0.05475584659192545), ('stim6col', 'orange'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'magenta'), ('corrAns', 'l')]), OrderedDict([('trialnum', 59), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.16426753977577635), ('stim1posy', -0.16426753977577635), ('stim1col', 'red'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', -0.16426753977577635), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', 0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.27377923295962725), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', -0.05475584659192545), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'black'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.27377923295962725), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 60), ('condit', 'different'), ('stimamt', 4), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.27377923295962725), ('stim1col', 'red'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.05475584659192545), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.05475584659192545), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.27377923295962725), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.05475584659192545), ('stim5col', 'orange'), ('stim5opa', 0), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.16426753977577635), ('stim6col', 'yellow'), ('stim6opa', 0), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', 0.05475584659192545), ('targetcol', 'yellow'), ('corrAns', 'l')]), OrderedDict([('trialnum', 61), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.16426753977577635), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.27377923295962725), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', -0.16426753977577635), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.27377923295962725), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.05475584659192545), ('stim5col', 'red'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'yellow'), ('corrAns', 'k')]), OrderedDict([('trialnum', 62), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', -0.05475584659192545), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.16426753977577635), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.05475584659192545), ('stim3col', 'orange'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.05475584659192545), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', -0.27377923295962725), ('stim5col', 'red'), ('stim5opa', 1), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.05475584659192545), ('stim6col', 'blue'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.05475584659192545), ('targetcol', 'yellow'), ('corrAns', 'k')]), OrderedDict([('trialnum', 63), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', 0.27377923295962725), ('stim1col', 'red'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.16426753977577635), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', -0.27377923295962725), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', 0.16426753977577635), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', 0.05475584659192545), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.05475584659192545), ('stim6col', 'magenta'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.05475584659192545), ('targetcol', 'magenta'), ('corrAns', 'k')]), OrderedDict([('trialnum', 64), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.27377923295962725), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.16426753977577635), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.16426753977577635), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.05475584659192545), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.16426753977577635), ('stim5col', 'cyan'), ('stim5opa', 1), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.16426753977577635), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', 0.27377923295962725), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 65), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.16426753977577635), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.05475584659192545), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', -0.05475584659192545), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.05475584659192545), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.05475584659192545), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', 0.27377923295962725), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'cyan'), ('corrAns', 'k')]), OrderedDict([('trialnum', 66), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', -0.27377923295962725), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.05475584659192545), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.05475584659192545), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.16426753977577635), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', -0.16426753977577635), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'magenta'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.16426753977577635), ('targetcol', 'green'), ('corrAns', 'k')]), OrderedDict([('trialnum', 67), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', -0.05475584659192545), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', 0.27377923295962725), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.27377923295962725), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', -0.05475584659192545), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', -0.16426753977577635), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', 0.16426753977577635), ('stim6col', 'red'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', 0.27377923295962725), ('targetcol', 'cyan'), ('corrAns', 'k')]), OrderedDict([('trialnum', 68), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.16426753977577635), ('stim1posy', -0.05475584659192545), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', -0.16426753977577635), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.05475584659192545), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', 0.27377923295962725), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', -0.05475584659192545), ('stim5col', 'black'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.27377923295962725), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', -0.16426753977577635), ('targetcol', 'orange'), ('corrAns', 'k')]), OrderedDict([('trialnum', 69), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.05475584659192545), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.05475584659192545), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.16426753977577635), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.05475584659192545), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.16426753977577635), ('stim5col', 'green'), ('stim5opa', 1), ('stim6posx', 0.05475584659192545), ('stim6posy', -0.16426753977577635), ('stim6col', 'magenta'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', -0.16426753977577635), ('targetcol', 'green'), ('corrAns', 'k')]), OrderedDict([('trialnum', 70), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.16426753977577635), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.27377923295962725), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.27377923295962725), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.05475584659192545), ('stim5col', 'magenta'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'blue'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', -0.27377923295962725), ('targetcol', 'red'), ('corrAns', 'k')]), OrderedDict([('trialnum', 71), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.16426753977577635), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', 0.05475584659192545), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', 0.05475584659192545), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.27377923295962725), ('stim5col', 'black'), ('stim5opa', 1), ('stim6posx', 0.05475584659192545), ('stim6posy', 0.16426753977577635), ('stim6col', 'cyan'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', 0.05475584659192545), ('targetcol', 'blue'), ('corrAns', 'k')]), OrderedDict([('trialnum', 72), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', -0.16426753977577635), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', 0.27377923295962725), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.27377923295962725), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', -0.16426753977577635), ('stim5col', 'cyan'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.05475584659192545), ('stim6col', 'black'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.27377923295962725), ('targetcol', 'magenta'), ('corrAns', 'k')]), OrderedDict([('trialnum', 73), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', 0.16426753977577635), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', 0.27377923295962725), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.16426753977577635), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.05475584659192545), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.16426753977577635), ('stim5col', 'black'), ('stim5opa', 1), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.16426753977577635), ('stim6col', 'magenta'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', 0.27377923295962725), ('targetcol', 'red'), ('corrAns', 'k')]), OrderedDict([('trialnum', 74), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.27377923295962725), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', 0.05475584659192545), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.27377923295962725), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.16426753977577635), ('stim5col', 'red'), ('stim5opa', 1), ('stim6posx', 0.05475584659192545), ('stim6posy', 0.27377923295962725), ('stim6col', 'green'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', -0.16426753977577635), ('targetcol', 'red'), ('corrAns', 'k')]), OrderedDict([('trialnum', 75), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.27377923295962725), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.16426753977577635), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.05475584659192545), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.05475584659192545), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', -0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'cyan'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.05475584659192545), ('targetcol', 'red'), ('corrAns', 'k')]), OrderedDict([('trialnum', 76), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.05475584659192545), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.27377923295962725), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', -0.27377923295962725), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', 0.16426753977577635), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.27377923295962725), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', 0.05475584659192545), ('stim6posy', -0.27377923295962725), ('stim6col', 'green'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', 0.05475584659192545), ('targetcol', 'cyan'), ('corrAns', 'k')]), OrderedDict([('trialnum', 77), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.27377923295962725), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.16426753977577635), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.05475584659192545), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', 0.16426753977577635), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.27377923295962725), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', -0.16426753977577635), ('stim6posy', -0.27377923295962725), ('stim6col', 'blue'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'red'), ('corrAns', 'k')]), OrderedDict([('trialnum', 78), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', 0.05475584659192545), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', -0.27377923295962725), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', -0.05475584659192545), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.05475584659192545), ('stim5col', 'yellow'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', 0.16426753977577635), ('stim6col', 'cyan'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', 0.16426753977577635), ('targetcol', 'red'), ('corrAns', 'k')]), OrderedDict([('trialnum', 79), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', -0.16426753977577635), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', -0.27377923295962725), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.27377923295962725), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.05475584659192545), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', -0.05475584659192545), ('stim5col', 'cyan'), ('stim5opa', 1), ('stim6posx', -0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'orange'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', 0.05475584659192545), ('targetcol', 'magenta'), ('corrAns', 'k')]), OrderedDict([('trialnum', 80), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', 0.16426753977577635), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.27377923295962725), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', 0.27377923295962725), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', -0.27377923295962725), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', 0.27377923295962725), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'black'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.27377923295962725), ('targetcol', 'yellow'), ('corrAns', 'k')]), OrderedDict([('trialnum', 81), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.27377923295962725), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', 0.16426753977577635), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', -0.16426753977577635), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.05475584659192545), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.27377923295962725), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.05475584659192545), ('stim6col', 'red'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.16426753977577635), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 82), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.16426753977577635), ('stim1col', 'red'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.05475584659192545), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', 0.27377923295962725), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', 0.05475584659192545), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.16426753977577635), ('stim5col', 'yellow'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'green'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', -0.16426753977577635), ('targetcol', 'yellow'), ('corrAns', 'k')]), OrderedDict([('trialnum', 83), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', -0.16426753977577635), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.16426753977577635), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.05475584659192545), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.27377923295962725), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', -0.16426753977577635), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.05475584659192545), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', -0.05475584659192545), ('targetcol', 'yellow'), ('corrAns', 'k')]), OrderedDict([('trialnum', 84), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.16426753977577635), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', 0.27377923295962725), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', -0.05475584659192545), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.16426753977577635), ('stim5col', 'cyan'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', 0.16426753977577635), ('stim6col', 'magenta'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', -0.16426753977577635), ('targetcol', 'cyan'), ('corrAns', 'k')]), OrderedDict([('trialnum', 85), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.16426753977577635), ('stim1posy', -0.27377923295962725), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', 0.16426753977577635), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.05475584659192545), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.05475584659192545), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.05475584659192545), ('stim5col', 'red'), ('stim5opa', 1), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.05475584659192545), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', -0.27377923295962725), ('targetcol', 'black'), ('corrAns', 'k')]), OrderedDict([('trialnum', 86), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', 0.27377923295962725), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.27377923295962725), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.16426753977577635), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', -0.27377923295962725), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.27377923295962725), ('stim5col', 'cyan'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', 0.05475584659192545), ('stim6col', 'orange'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', 0.05475584659192545), ('targetcol', 'orange'), ('corrAns', 'k')]), OrderedDict([('trialnum', 87), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.16426753977577635), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.05475584659192545), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.05475584659192545), ('stim5col', 'yellow'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.27377923295962725), ('stim6col', 'red'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.27377923295962725), ('targetcol', 'red'), ('corrAns', 'k')]), OrderedDict([('trialnum', 88), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', 0.05475584659192545), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.27377923295962725), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', -0.16426753977577635), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.27377923295962725), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.16426753977577635), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'cyan'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.27377923295962725), ('targetcol', 'yellow'), ('corrAns', 'k')]), OrderedDict([('trialnum', 89), ('condit', 'same'), ('stimamt', 6), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.27377923295962725), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', 0.16426753977577635), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.27377923295962725), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.27377923295962725), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', -0.16426753977577635), ('stim5col', 'magenta'), ('stim5opa', 1), ('stim6posx', -0.16426753977577635), ('stim6posy', 0.27377923295962725), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.27377923295962725), ('targetcol', 'yellow'), ('corrAns', 'k')]), OrderedDict([('trialnum', 90), ('condit', 'same'), ('stimamt', 6), ('stim1posx', 0.16426753977577635), ('stim1posy', -0.05475584659192545), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.05475584659192545), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.27377923295962725), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', -0.05475584659192545), ('stim5col', 'magenta'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.27377923295962725), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.05475584659192545), ('targetcol', 'orange'), ('corrAns', 'k')]), OrderedDict([('trialnum', 91), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.05475584659192545), ('stim1posy', 0.05475584659192545), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.16426753977577635), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', -0.05475584659192545), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', 0.27377923295962725), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', 0.27377923295962725), ('stim5col', 'magenta'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'red'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', -0.05475584659192545), ('targetcol', 'green'), ('corrAns', 'l')]), OrderedDict([('trialnum', 92), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.16426753977577635), ('stim1posy', 0.16426753977577635), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', -0.05475584659192545), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', -0.05475584659192545), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.16426753977577635), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', 0.16426753977577635), ('targetcol', 'cyan'), ('corrAns', 'l')]), OrderedDict([('trialnum', 93), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.16426753977577635), ('stim1posy', 0.16426753977577635), ('stim1col', 'red'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.05475584659192545), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', -0.16426753977577635), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.27377923295962725), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', 0.05475584659192545), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'cyan'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', -0.16426753977577635), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 94), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', -0.27377923295962725), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.05475584659192545), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.16426753977577635), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', 0.05475584659192545), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', -0.16426753977577635), ('stim5col', 'magenta'), ('stim5opa', 1), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.05475584659192545), ('stim6col', 'orange'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', -0.27377923295962725), ('targetcol', 'magenta'), ('corrAns', 'l')]), OrderedDict([('trialnum', 95), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.16426753977577635), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', 0.27377923295962725), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.27377923295962725), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', -0.27377923295962725), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.16426753977577635), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', 0.05475584659192545), ('stim6col', 'cyan'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', 0.27377923295962725), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 96), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.16426753977577635), ('stim1posy', -0.16426753977577635), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', 0.05475584659192545), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', 0.16426753977577635), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', -0.27377923295962725), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', -0.27377923295962725), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', -0.05475584659192545), ('stim6posy', 0.05475584659192545), ('stim6col', 'red'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.05475584659192545), ('targetcol', 'magenta'), ('corrAns', 'l')]), OrderedDict([('trialnum', 97), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.27377923295962725), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.27377923295962725), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'green'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.05475584659192545), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.16426753977577635), ('stim5col', 'black'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.05475584659192545), ('targetcol', 'yellow'), ('corrAns', 'l')]), OrderedDict([('trialnum', 98), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.05475584659192545), ('stim1posy', -0.16426753977577635), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', 0.27377923295962725), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', -0.27377923295962725), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.27377923295962725), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', -0.16426753977577635), ('stim5col', 'cyan'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.05475584659192545), ('stim6col', 'black'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.27377923295962725), ('targetcol', 'cyan'), ('corrAns', 'l')]), OrderedDict([('trialnum', 99), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', 0.16426753977577635), ('stim1col', 'orange'), ('stim1opa', 1), ('stim2posx', 0.16426753977577635), ('stim2posy', -0.16426753977577635), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.27377923295962725), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.05475584659192545), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.05475584659192545), ('stim5col', 'black'), ('stim5opa', 1), ('stim6posx', 0.05475584659192545), ('stim6posy', -0.05475584659192545), ('stim6col', 'green'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.27377923295962725), ('targetcol', 'blue'), ('corrAns', 'l')]), OrderedDict([('trialnum', 100), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.16426753977577635), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.05475584659192545), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.05475584659192545), ('stim3col', 'orange'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.27377923295962725), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.05475584659192545), ('stim5col', 'green'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', 0.05475584659192545), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.16426753977577635), ('targetcol', 'orange'), ('corrAns', 'l')]), OrderedDict([('trialnum', 101), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.27377923295962725), ('stim1col', 'yellow'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.16426753977577635), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', -0.16426753977577635), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.05475584659192545), ('stim5col', 'green'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.16426753977577635), ('stim6col', 'blue'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', 0.27377923295962725), ('targetcol', 'green'), ('corrAns', 'l')]), OrderedDict([('trialnum', 102), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.27377923295962725), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'green'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', -0.27377923295962725), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.05475584659192545), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.27377923295962725), ('stim5col', 'red'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.05475584659192545), ('stim6col', 'cyan'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.27377923295962725), ('targetcol', 'yellow'), ('corrAns', 'l')]), OrderedDict([('trialnum', 103), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.16426753977577635), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.05475584659192545), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', 0.27377923295962725), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', -0.05475584659192545), ('stim4posy', 0.16426753977577635), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', -0.16426753977577635), ('stim5col', 'green'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'red'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'blue'), ('corrAns', 'l')]), OrderedDict([('trialnum', 104), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', -0.16426753977577635), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', 0.27377923295962725), ('stim2col', 'yellow'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', 0.27377923295962725), ('stim3col', 'blue'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', -0.05475584659192545), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', -0.05475584659192545), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.16426753977577635), ('stim6col', 'green'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.16426753977577635), ('targetcol', 'cyan'), ('corrAns', 'l')]), OrderedDict([('trialnum', 105), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', 0.27377923295962725), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.16426753977577635), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', -0.05475584659192545), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.16426753977577635), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', 0.16426753977577635), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.27377923295962725), ('stim6col', 'green'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', -0.27377923295962725), ('targetcol', 'blue'), ('corrAns', 'l')]), OrderedDict([('trialnum', 106), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.05475584659192545), ('stim1posy', -0.16426753977577635), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.27377923295962725), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.27377923295962725), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.05475584659192545), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', -0.05475584659192545), ('stim5col', 'green'), ('stim5opa', 1), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.16426753977577635), ('stim6col', 'black'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', -0.05475584659192545), ('targetcol', 'cyan'), ('corrAns', 'l')]), OrderedDict([('trialnum', 107), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.16426753977577635), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.27377923295962725), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', -0.05475584659192545), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', 0.16426753977577635), ('stim5posy', 0.05475584659192545), ('stim5col', 'green'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', 0.05475584659192545), ('targetcol', 'blue'), ('corrAns', 'l')]), OrderedDict([('trialnum', 108), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.05475584659192545), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', 0.16426753977577635), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.27377923295962725), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', -0.16426753977577635), ('stim5col', 'orange'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', 0.27377923295962725), ('stim6col', 'black'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.05475584659192545), ('targetcol', 'blue'), ('corrAns', 'l')]), OrderedDict([('trialnum', 109), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.16426753977577635), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.16426753977577635), ('stim2col', 'black'), ('stim2opa', 1), ('stim3posx', -0.05475584659192545), ('stim3posy', 0.05475584659192545), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.16426753977577635), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.05475584659192545), ('stim5col', 'yellow'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.27377923295962725), ('stim6col', 'orange'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'green'), ('corrAns', 'l')]), OrderedDict([('trialnum', 110), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', 0.27377923295962725), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', -0.16426753977577635), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', 0.27377923295962725), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'orange'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', 0.05475584659192545), ('stim5col', 'magenta'), ('stim5opa', 1), ('stim6posx', 0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'yellow'), ('corrAns', 'l')]), OrderedDict([('trialnum', 111), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.27377923295962725), ('stim1posy', 0.27377923295962725), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', -0.16426753977577635), ('stim2col', 'red'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', -0.16426753977577635), ('stim3col', 'black'), ('stim3opa', 1), ('stim4posx', -0.16426753977577635), ('stim4posy', 0.16426753977577635), ('stim4col', 'magenta'), ('stim4opa', 1), ('stim5posx', 0.05475584659192545), ('stim5posy', 0.05475584659192545), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', 0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'green'), ('corrAns', 'l')]), OrderedDict([('trialnum', 112), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', -0.16426753977577635), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', 0.05475584659192545), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', 0.27377923295962725), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', -0.27377923295962725), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', -0.27377923295962725), ('stim5col', 'black'), ('stim5opa', 1), ('stim6posx', -0.16426753977577635), ('stim6posy', 0.05475584659192545), ('stim6col', 'red'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.05475584659192545), ('targetcol', 'orange'), ('corrAns', 'l')]), OrderedDict([('trialnum', 113), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', 0.05475584659192545), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.16426753977577635), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', -0.16426753977577635), ('stim3col', 'orange'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', 0.16426753977577635), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', 0.27377923295962725), ('stim5col', 'green'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'magenta'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.16426753977577635), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 114), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.16426753977577635), ('stim1posy', 0.16426753977577635), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', -0.27377923295962725), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', 0.05475584659192545), ('stim3posy', 0.16426753977577635), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', 0.27377923295962725), ('stim4posy', -0.16426753977577635), ('stim4col', 'green'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', 0.16426753977577635), ('stim5col', 'cyan'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.27377923295962725), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.05475584659192545), ('targetposy', 0.16426753977577635), ('targetcol', 'blue'), ('corrAns', 'l')]), OrderedDict([('trialnum', 115), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.16426753977577635), ('stim1posy', 0.27377923295962725), ('stim1col', 'magenta'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.05475584659192545), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', 0.27377923295962725), ('stim3col', 'red'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.27377923295962725), ('stim4col', 'cyan'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', 0.16426753977577635), ('stim5col', 'green'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.27377923295962725), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.05475584659192545), ('targetcol', 'yellow'), ('corrAns', 'l')]), OrderedDict([('trialnum', 116), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', 0.16426753977577635), ('stim1col', 'green'), ('stim1opa', 1), ('stim2posx', -0.05475584659192545), ('stim2posy', -0.05475584659192545), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', 0.27377923295962725), ('stim3posy', -0.27377923295962725), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', 0.27377923295962725), ('stim4col', 'red'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', 0.16426753977577635), ('stim5col', 'blue'), ('stim5opa', 1), ('stim6posx', -0.16426753977577635), ('stim6posy', -0.05475584659192545), ('stim6col', 'yellow'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', -0.05475584659192545), ('targetcol', 'magenta'), ('corrAns', 'l')]), OrderedDict([('trialnum', 117), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.05475584659192545), ('stim1posy', 0.05475584659192545), ('stim1col', 'black'), ('stim1opa', 1), ('stim2posx', 0.05475584659192545), ('stim2posy', 0.27377923295962725), ('stim2col', 'magenta'), ('stim2opa', 1), ('stim3posx', -0.27377923295962725), ('stim3posy', -0.27377923295962725), ('stim3col', 'yellow'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.16426753977577635), ('stim4col', 'blue'), ('stim4opa', 1), ('stim5posx', -0.16426753977577635), ('stim5posy', 0.05475584659192545), ('stim5col', 'cyan'), ('stim5opa', 1), ('stim6posx', 0.05475584659192545), ('stim6posy', 0.05475584659192545), ('stim6col', 'red'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.16426753977577635), ('targetposy', 0.05475584659192545), ('targetcol', 'black'), ('corrAns', 'l')]), OrderedDict([('trialnum', 118), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.16426753977577635), ('stim1posy', -0.16426753977577635), ('stim1col', 'red'), ('stim1opa', 1), ('stim2posx', 0.27377923295962725), ('stim2posy', 0.16426753977577635), ('stim2col', 'orange'), ('stim2opa', 1), ('stim3posx', -0.16426753977577635), ('stim3posy', 0.27377923295962725), ('stim3col', 'cyan'), ('stim3opa', 1), ('stim4posx', 0.16426753977577635), ('stim4posy', -0.27377923295962725), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', -0.05475584659192545), ('stim5posy', -0.05475584659192545), ('stim5col', 'yellow'), ('stim5opa', 1), ('stim6posx', 0.05475584659192545), ('stim6posy', 0.05475584659192545), ('stim6col', 'green'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.05475584659192545), ('targetposy', -0.05475584659192545), ('targetcol', 'magenta'), ('corrAns', 'l')]), OrderedDict([('trialnum', 119), ('condit', 'different'), ('stimamt', 6), ('stim1posx', -0.27377923295962725), ('stim1posy', 0.05475584659192545), ('stim1col', 'cyan'), ('stim1opa', 1), ('stim2posx', -0.27377923295962725), ('stim2posy', -0.27377923295962725), ('stim2col', 'blue'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', 0.05475584659192545), ('stim3col', 'orange'), ('stim3opa', 1), ('stim4posx', 0.05475584659192545), ('stim4posy', -0.16426753977577635), ('stim4col', 'yellow'), ('stim4opa', 1), ('stim5posx', -0.27377923295962725), ('stim5posy', 0.27377923295962725), ('stim5col', 'black'), ('stim5opa', 1), ('stim6posx', -0.05475584659192545), ('stim6posy', -0.05475584659192545), ('stim6col', 'green'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', -0.27377923295962725), ('targetposy', -0.27377923295962725), ('targetcol', 'cyan'), ('corrAns', 'l')]), OrderedDict([('trialnum', 120), ('condit', 'different'), ('stimamt', 6), ('stim1posx', 0.16426753977577635), ('stim1posy', -0.05475584659192545), ('stim1col', 'blue'), ('stim1opa', 1), ('stim2posx', -0.16426753977577635), ('stim2posy', -0.27377923295962725), ('stim2col', 'cyan'), ('stim2opa', 1), ('stim3posx', 0.16426753977577635), ('stim3posy', 0.16426753977577635), ('stim3col', 'magenta'), ('stim3opa', 1), ('stim4posx', -0.27377923295962725), ('stim4posy', 0.27377923295962725), ('stim4col', 'black'), ('stim4opa', 1), ('stim5posx', 0.27377923295962725), ('stim5posy', -0.16426753977577635), ('stim5col', 'green'), ('stim5opa', 1), ('stim6posx', -0.27377923295962725), ('stim6posy', -0.16426753977577635), ('stim6col', 'orange'), ('stim6opa', 1), ('stimsizex', 0.05), ('stimsizey', 0.05), ('stimdur', 0.15), ('targetposx', 0.16426753977577635), ('targetposy', 0.16426753977577635), ('targetcol', 'yellow'), ('corrAns', 'l')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions_luria_6_screen_pos.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="CDT_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="take_break"/>
    <Routine name="CDT_Trial"/>
    <LoopTerminator name="CDT_trials"/>
    <Routine name="GNG_Instr_Train"/>
    <Routine name="GNG_fix"/>
    <LoopInitiator loopType="TrialHandler" name="GNGtrials_train">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('corrAns', None), ('orangeOpacity', 1), ('blueOpacity', 0)]), OrderedDict([('corrAns', None), ('orangeOpacity', 1), ('blueOpacity', 0)]), OrderedDict([('corrAns', None), ('orangeOpacity', 1), ('blueOpacity', 0)]), OrderedDict([('corrAns', None), ('orangeOpacity', 1), ('blueOpacity', 0)]), OrderedDict([('corrAns', 'space'), ('orangeOpacity', 0), ('blueOpacity', 1)]), OrderedDict([('corrAns', 'space'), ('orangeOpacity', 0), ('blueOpacity', 1)]), OrderedDict([('corrAns', 'space'), ('orangeOpacity', 0), ('blueOpacity', 1)]), OrderedDict([('corrAns', 'space'), ('orangeOpacity', 0), ('blueOpacity', 1)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="GNGCondJK20_Train.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="GNGtrials_train" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="GNG_Trial_Train"/>
    <Routine name="GNG_Feedback"/>
    <LoopTerminator name="GNGtrials_train"/>
    <Routine name="GNG_Instr"/>
    <Routine name="GNG_fix"/>
    <LoopInitiator loopType="TrialHandler" name="GNG_trials_1">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="html/resources/GNGCondJK20.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="GNG_trials_1" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="GNG_trial"/>
    <LoopTerminator name="GNG_trials_1"/>
    <Routine name="GNG_Instr_2"/>
    <Routine name="GNG_fix"/>
    <LoopInitiator loopType="TrialHandler" name="GNG_trials_2">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="html/resources/GNGCondJK20.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="GNG_trials_2" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="GNG_trial"/>
    <LoopTerminator name="GNG_trials_2"/>
    <Routine name="GNG_Instr_2"/>
    <Routine name="GNG_fix"/>
    <LoopInitiator loopType="TrialHandler" name="GNG_trials_3">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 0), ('orangeOpacity', 1), ('corrAns', None)]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')]), OrderedDict([('blueOpacity', 1), ('orangeOpacity', 0), ('corrAns', 'space')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="html/resources/GNGCondJK20.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="GNG_trials_3" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="GNG_trial"/>
    <LoopTerminator name="GNG_trials_3"/>
    <LoopInitiator loopType="TrialHandler" name="engprof_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('qnumber', 1), ('qproficiency', 'On a scale from 0 to 10, indicate your personal perception of your proficiency level for English (10 being the highest score)')]), OrderedDict([('qnumber', 2), ('qproficiency', &quot;On a scale from 0 to 10, indicate how frequently you are exposed to English (10 being 'always', 0 being 'never')&quot;)])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="html/resources/engprof_cond.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="engprof_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="englishq_slider"/>
    <LoopTerminator name="engprof_trials"/>
    <Routine name="IUS12_Instr"/>
    <LoopInitiator loopType="TrialHandler" name="IUS12_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('qnumber', 1), ('qenglish', 'Unforeseen events upset me greatly.')]), OrderedDict([('qnumber', 2), ('qenglish', 'It frustrates me not having all the information I need.')]), OrderedDict([('qnumber', 3), ('qenglish', 'One should always look ahead so as to avoid surprises.')]), OrderedDict([('qnumber', 4), ('qenglish', 'A small, unforeseen event can spoil everything, even with the best of planning. ')]), OrderedDict([('qnumber', 5), ('qenglish', 'I always want to know what the future has in store for me.')]), OrderedDict([('qnumber', 6), ('qenglish', 'I can’t stand being taken by surprise.')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="html/resources/IUS12_cond.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="IUS12_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial_slider"/>
    <LoopTerminator name="IUS12_trials"/>
    <Routine name="debrief"/>
    <Routine name="thanks_2"/>
  </Flow>
</PsychoPy2experiment>
